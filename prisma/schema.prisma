generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model project {
  project_id      Int               @id @default(autoincrement())
  title           String            @db.VarChar(255)
  start_date      DateTime          @db.Date
  due_date        DateTime          @db.Date
  user_id         Int
  description     String?           @db.VarChar(500)
  complete        Boolean           @default(false)
  user            user              @relation("owner", fields: [user_id], references: [user_id])
  project_comment project_comment[]
  todo            todo[]
  members         users_members[]

  @@unique([project_id, user_id])
  @@index([user_id], map: "project_user_id_fkey")
}

model todo {
  todo_id     Int     @id @default(autoincrement())
  title       String  @db.VarChar(255)
  estimate    String  @db.VarChar(255)
  description String  @db.VarChar(255)
  project_id  Int
  status      Status  @default(NOT_STARTED)
  assignee    String?
  project     project @relation(fields: [project_id], references: [project_id], onDelete: Cascade)

  @@index([project_id], map: "todo_project_id_fkey")
}

model user {
  user_id         Int               @id @default(autoincrement())
  username        String            @unique
  password        String
  project         project[]         @relation("owner")
  project_comment project_comment[]
  users_members   users_members[]

  @@unique([user_id, username])
}

model users_members {
  id         Int      @id @unique @default(autoincrement())
  user_id    Int
  username   String
  project_id Int?
  role       String?  @default("member")
  project    project? @relation(fields: [project_id], references: [project_id])
  user       user     @relation(fields: [user_id, username], references: [user_id, username])

  @@unique([project_id, user_id])
  @@index([user_id, username], map: "users_members_user_id_username_fkey")
}

model project_comment {
  comment_id      Int               @id @unique @default(autoincrement())
  user_id         Int
  project_id      Int
  content         String
  reply_to_id     Int?
  time_posted     DateTime          @default(now())
  project         project           @relation(fields: [project_id], references: [project_id])
  reply           project_comment?  @relation("CommentReply", fields: [reply_to_id], references: [comment_id])
  project_comment project_comment[] @relation("CommentReply")
  user            user              @relation(fields: [user_id], references: [user_id])

  @@index([project_id], map: "project_comment_project_id_fkey")
  @@index([reply_to_id], map: "project_comment_reply_to_id_fkey")
  @@index([user_id], map: "project_comment_user_id_fkey")
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  DONE
}
